#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#################################################################
# Design based on IceFox script                                 #
# Modified, adapted and improved by pekman and excalibur1234    #
# translation by spylinux                                       #
# fzf and Downgrade support added by Chrysostomus               #
# Contact and suggestions: pekman@openmailbox.org               #
# Freenode: #manjaropek #manjaro-geek #manjaro                  #
# Topic discussion                                              #
#                       http://polr.me/pacli1                   #
#################################################################

catplus()
{
    local file="$1"
    if [ -r "$file" ]; then
        # bold for **texte**
        local txt=$(sed -e 's|\*\*\([^\*]*\)\*\*|\\033[1m\1\\033[0m|g' "$file")
        # red for !!texte!!
        txt=$(sed -e 's|!!\([^!]*\)!!|\\e[01;31m\1\\033[0m|g' <<< "$txt")
        echo -e "$txt"
    fi
}
help_text()
{
    local help="/usr/share/doc/pacli/help"
    [ -f "$help" ] || help="./pacli.help" # for devs
    catplus "$help" | less
}

# "yaourt -Sl" downloads a list of packages EVERY TIME it is called. this is unacceptable.
# write package list of repositories to /tmp/packages. then, download AUR package list, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/packages.
pacman -Slq > /tmp/packages &
wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz >/dev/null 2>&1 && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/packages &

# set colors
RED='\e[41m'
NC='\e[0m'

    while true; do
    clear
    echo ""
    echo -e "                     $NC ::Pacli - Package manager:: $NC "
    echo ""
    echo -e " ┌────────────────────────────────────────────────────────────────────┐"
    echo -e " │  $NC  1 $NC  Update System               $NC  2 $NC  Install Package           │"
    echo -e " │  $NC  3 $NC  Remove Package + Deps       $NC  4 $NC  List Local Package Files  │"
    echo -e " │  $NC  5 $NC  Package Information         $NC  6 $NC  Clean System              │"
    echo -e " │  $NC  7 $NC  Dependency Tree             $NC  8 $NC  Reverse Dependency Tree   │"
    echo -e " └────────────────────────────────────────────────────────────────────┘"
    echo -e " ┌────────────────────────────────────────────────────────────────────┐"
    echo -e " │  $NC  9 $NC  Optimize Mirrors            $NC 10 $NC  Remove Orphaned Packages  │"
    echo -e " │  $NC 11 $NC  Clean Package Cache         $NC 12 $NC  Defragment Database       │"
    echo -e " │  $NC 13 $NC  Fix Errors                  $NC 14 $NC  Pacman Log                │"
    echo -e " │  $NC 15 $NC  Downgrade Packages          $NC 16 $NC  Help                      │"
    echo -e " │ $RED  17   Force Install Package        18   Force Update System      $NC │"
    echo -e " │ $RED  19   Force Remove Package         20   Empty Package Cache      $NC │"
    echo -e " └────────────────────────────────────────────────────────────────────┘"
    echo ""
    echo -e " ┌────────────────────────────────────────────────────────────────────┐"
    echo -e " │  $NC 21 $NC  Update AUR                  $NC 22 $NC  Force Update AUR          │"
    echo -e " │  $NC 23 $NC  Search + Install from AUR   $NC 24 $NC  Install from AUR          │"
    echo -e " │  $NC 25 $NC  List Installed from AUR                                     │"
    echo -e " └────────────────────────────────────────────────────────────────────┘"
    echo ""
    echo -e " $NC Enter a number between 0 and 25 and press [Enter]$NC $NC - 0 Exit Pacli$NC"
    echo ""
    read choix
    case $choix in
        1)
            echo
            sudo pacman -Syu --color always
            echo
            echo -e "$NC Your system is updated. To return to pacli press [Enter] $NC"
            read
            ;;
        2)
            echo
            sudo pacman -S $(package-query -Sl -f "%n - %d" | fzf-tmux -e -m  --reverse --prompt='Select packages to install (use TAB to toggle selection) >' | awk '{print $1}') --color always
            echo
            echo -e "$NC Package installation is finished. To return to pacli press [Enter] $NC"
            read
            ;;
        3)
            echo
            sudo pacman -Rsn $(pacman -Qq | fzf-tmux -e -m --reverse --prompt='Select packages to remove (use TAB to toggle selection) >') --color always
            echo
            echo -e "$NC Package and all unneeded dependencies removed. To return to pacli press [Enter] $NC"
            read
            ;;
        4)
            echo
            pacman -Ql $(pacman -Qq | fzf-tmux -e -m  --reverse --prompt='Select a packages of which to list all files (use TAB to toggle selection)  >') --color always
            echo
            echo -e "$NC All local files in package listed. To return to pacli press [Enter] $NC"
            read
            ;;
        5)
            clear
            echo
            yaourt -Qq > /tmp/local_packages
            
            cat /tmp/packages /tmp/local_packages | sort | uniq > /tmp/all_packages
            pkg=$(cat /tmp/packages | fzf-tmux -e --reverse --prompt='Select a package to display information about >')
            if (yaourt -Qq "${pkg}" &>/dev/null); then
                out=$(yaourt -Qii "${pkg}")
            else
                out=$(yaourt -Sii "${pkg}")
            fi
            echo -e "$out" | grep -v "\-\-$" | sed 's/ : \(.*\)/ \x1b[0m: \x1b[1m\1\x1b[0m/; s/  \(.*\)/  \x1b[1m\1\x1b[0m/'
            unset pkg out
            echo -e "\n$NC Package information displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        6)
            echo
            sudo pacman-mirrors -g && sudo pacman -Syyu --color always
            yaourt -Qdt
            paccache -ruvk0
            paccache -rvk2
            echo
            [ -f "${pacli_desc}" ] && cat "${pacli_desc}"
            echo -e "$NC System is updated and cache is cleaned. To return to pacli press [Enter] $NC"
            read
            ;;
        7)
            echo
            pactree -c -s $(pacman -Slq | fzf-tmux -e --reverse --prompt='Select a package >')
            echo
            echo -e "$NC Dependency tree displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        8)
            echo
            pactree -c -r $(pacman -Qq | fzf-tmux -e --reverse --prompt='Select a package >')
            echo
            echo -e "$NC Reverse dependency tree displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        9)
            echo
            sudo pacman-mirrors -g && sudo pacman -Syy --color always
            echo -e "\n$NC Best Manjaro mirror chosen. To return to pacli press [Enter] $NC"
            read
            ;;
        10)
            echo
            yaourt -Qdt
            echo
            echo -e "$NC Task completed. To return to pacli press [Enter] $NC"
            read
            ;;
        11)
            echo
            paccache -ruvk0
            paccache -rvk2
            echo
            echo -e "$NC Unneeded and old package versions removed. To return to pacli press [Enter] $NC"
            read
            ;;
        12)
            echo
            sudo pacman-optimize
            echo
            echo -e "$NC Pacman Database defragmented and optimized for HDDs. To return to pacli press [Enter] $NC"
            read
            ;;
        13)
            echo
            sudo rm -f /var/lib/pacman/db.lck
            sudo pacman-mirrors -g && sudo pacman -Syy
            sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring && sudo rm -r /etc/pacman.d/gnupg && sudo pacman-key --init && sudo pacman-key --populate archlinux manjaro && sudo pacman-key --refresh-keys
            sudo pacman -Syyuu --color always
            echo -e "\n$NC Most common Pacman errors fixed and system updated. To return to pacli press [Enter] $NC"
            read
            ;;
        14|140)
            echo
            if [[ "$choix" == "14" ]]; then
                tail -2000 /var/log/pacman.log
                echo -e "\n$NC Last 2000 lines of Pacman Log displayed. Navigate with SHIFT+PageUp. To return to pacli press [Enter] $NC"
            elif [[ "$choix" == "140" ]]; then
                grep "\[ALPM\]" /var/log/pacman.log | grep -i " $(pacman -Slq | fzf-tmux -e --reverse --prompt='Select a package >') "
                echo -e "\n$NC pacman history.To return to pacli press [Enter] $NC"
            fi
            read
            ;;
        15)
            echo
            downgrade $(pacman -Qq | fzf-tmux -e --reverse --prompt='Select package to downgrade >')
            echo
            echo -e "$NC Downgrade process finished. To return to pacli press [Enter] $NC"
            read
            ;;
        16)
            echo
            help_text
            echo
            ;;
        17)
            echo
            sudo pacman -S --force $(pacman -Slq | fzf -e --reverse --prompt='Select package to install >') --color always
            echo
            echo -e "$NC Package installation in force mode is finished. To return to pacli press [Enter] $NC"
            read
            ;;
        18)
            echo
            sudo pacman -Syu --force --color always
            echo
            echo -e "$NC Your system is updated in force mode. To return to pacli press [Enter] $NC"
            read
            ;;
        19)
            echo
            sudo pacman -Rdd $(pacman -Qq | fzf-tmux -e -m --reverse --prompt='Select packages to remove >') --color always
            echo
            echo -e "$NC Dependency in force mode removed. To return to pacli press [Enter] $NC"
            read
            ;;
        20)
            echo
            yaourt -Scc
            echo
            echo -e "$NC Entire package cache emptied. To return to pacli press [Enter] $NC"
            read
            ;;
        21)
            echo
            yaourt -Syua
            echo
            echo -e "$NC Your system is updated. To return to pacli press [Enter] $NC"
            read
            ;;
        22)
            echo
            yaourt -Syua && yaourt -Syua --devel --noconfirm
            echo
            echo -e "$NC All AUR packages reinstalled. To return to pacli press [Enter] $NC"
            read
            ;;
        23)
            echo
            echo "Enter name of package to be searched and installed from AUR and press [Enter] to continue"
            echo
            read package
            [ -n "$package" ] && yaourt "$package"
            unset $package
            echo
            echo -e "$NC Yaourt finished. To return to pacli press [Enter] $NC"
            read
            ;;
        24|240)
            echo
            if ((choix==24)); then
                yaourt -S $(cat /tmp/packages | fzf-tmux -e -m --reverse --prompt='Select packages to install (toggle selection with TAB) >')
                echo -e "\n$NC Installation from AUR finished. To return to pacli press [Enter] $NC"
            elif ((choix==240)); then
                [ -d "/tmp/pacli-git" ] && rm -rf /tmp/pacli-git
                read -p 'Enter git url repository: ' -r url
                git clone "$url" /tmp/pacli-git
                if [ -d "/tmp/pacli-git" ]; then
                    cd /tmp/pacli-git
                    makepkg -scfi
                    rm -rf /tmp/pacli-git
                fi
                unset url
                echo -e "\n$NC Installation from git repo finished. To return to pacli press [Enter] $NC"
            fi
            read
            ;;
        25)
            echo
            pacman -Qem --color always
            echo
            echo -e "$NC All locally installed packages listed. To return to pacli press [Enter] $NC"
            read
            ;;
        26)
            echo
            [[ -z "$EDITOR" ]] && EDITOR='nano'
            file="$HOME/.yaourtrc"
            [ -f "$file" ] || file="$HOME/.config/yaourtrc"
            if [ -f "$file" ]; then 
                $EDITOR "$file"
            else 
                cp /etc/yaourtrc "$file" && $EDITOR "$file"
            fi
            unset file
            echo
            ;;            
        0)
            echo
            clear && exit
            read
            ;;
        *)
            echo -e "$RED Wrong option $NC"
            echo "Wait and try again later..."
            echo
            sleep 2
            clear
            ;;
    esac
    done
fi
